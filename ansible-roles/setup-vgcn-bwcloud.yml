# Setup for Virtual Galaxy Compute Node
# This setup is valid for RHEL 8.x based systems.
---
- hosts: default
  vars_files:
    - "group_vars/all.yml"
    - "group_vars/pulsar.yml"
    - "group_vars/condor.yml"
    - "group_vars/cuda.yml"
  pre_tasks:
    - name: system update
      ansible.builtin.dnf:
        name: '*'
        state: latest
        exclude: condor*
    - name: Install Pulsar dependencies
      become: yes
      ansible.builtin.dnf:
        state: latest
        name:
          - git
          - python36
          - python3-devel
          - python3-virtualenv
          - gcc
          - curl
          - libcurl-devel
          - openssl-devel
    - name: Set default version of Python
      ansible.builtin.alternatives:
        name: python
        path: /usr/bin/python3
    - name: Put SELinux in permissive mode, logging actions that would be blocked.
      ansible.posix.selinux:
        policy: targeted
        state: permissive
    - name: "Deploy docker-stop-1M script"
      ansible.builtin.copy:
        content: |
            #!/bin/bash
            docker ps -f status=running --format '{{ '{{' }}.ID}}: {{ '{{' }}.RunningFor}}' | awk '/months/ && $2 > 1 { print $0 }'|cut -f1 -d':' | xargs docker stop
        dest: /usr/bin/docker-stop-1M
        owner: root
        group: root
        mode: 0755
  post_tasks:
    - name: galaxy account group
      ansible.builtin.group:
        gid: "{{ galaxy_gid }}"
        name: galaxy
        state: present
    - name: galaxy account user
      ansible.builtin.user:
        uid: "{{ galaxy_uid }}"
        name: galaxy
        group: galaxy
        home: /opt/galaxy
        state: present
        comment: Galaxy Service-Acct
        createhome: no
    - ansible.builtin.user:
        name: galaxy
        groups: condor,docker
        append: yes
    - ansible.builtin.user:
        name: centos
        groups: docker
        append: yes
    - ansible.builtin.dnf:
        name: "{{ packages }}"
        state: absent
      vars:
        packages:
          - python3-devel
          - gcc
          - libcurl-devel
          - openssl-devel
      become: yes
    - name: Copy Docker daemon.json
      ansible.builtin.copy:
        src: daemon.json
        dest: /etc/docker/daemon.json
        mode: '0644'
    - name: Restart Docker service, in all cases
      ansible.builtin.service:
        name: docker
        state: restarted
    - name: Disable firewalld service
      ansible.builtin.systemd:
        name: firewalld
        enabled: no
        state: stopped
    - name: Deploy a signal emitter for telegraf
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          echo '{"alive":1}'
        dest: /bin/iamalive
        owner: telegraf
        group: telegraf
        mode: 0755
  roles:
    - role: usegalaxy_eu.handy.os_setup
      vars:
        enable_powertools: true # geerlingguy.repo-epel role doesn't enable PowerTools repository
        enable_remap_user: false
        enable_kernel_5: true
        enable_pam_limits: true
        enable_grub: true
        enable_cgroups: true
        enable_journald: true
        enable_install_software: true
        enable_ansible_root_cron: false

    - geerlingguy.repo-epel # Install EPEL
    - usegalaxy-eu.autofs
    - usegalaxy-eu.htcondor
    - usegalaxy-eu.dynmotd
    - dj-wasabi.telegraf
    - influxdata.chrony
    - geerlingguy.java
    - geerlingguy.docker
    - galaxyproject.cvmfs
    - galaxyproject.pulsar
    - usegalaxy_eu.cuda
    - usegalaxy-eu.nvidia-container

    - role: usegalaxy_eu.handy.os_setup
      vars:
        enable_powertools: false # geerlingguy.repo-epel role doesn't enable PowerTools repository
        enable_remap_user: true  # needs to be at the end, otherwise dnsmasq will occupy 999 slot
        enable_kernel_5: false
        enable_pam_limits: false
        enable_grub: false
        enable_cgroups: false
        enable_journald: false
        enable_install_software: false
        enable_ansible_root_cron: true
